(()=>{eval("/* popup.js\r\n *\r\n * This file initializes its scripts after the popup has loaded.\r\n *\r\n * It shows how to access global variables from background.js.\r\n * Note that getViews could be used instead to access other scripts.\r\n *\r\n * A port to the active tab is open to send messages to its in-content.js script.\r\n *\r\n */\n\n// This port enables a long-lived connection to in-content.js\nvar port = null;\n// var arr ={message,email};\n// Send messages to the open port\nconst sendPortMessage = arr => port && port.postMessage(arr);\n\n// Start the popup script, this could be anything from a simple script to a webapp\nconst initPopupScript = () => {\n  console.log('initPopup');\n\n  // Access the background window object\n  const backgroundWindow = chrome.extension.getBackgroundPage();\n  // Do anything with the exposed variables from background.js\n  console.log(backgroundWindow.sampleBackgroundGlobal);\n\n  // Find the current active tab\n  const getTab = () => new Promise(resolve => {\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n    }, tabs => resolve(tabs[0]));\n  });\n\n  // Handle port messages\n  const messageHandler = message => {\n    console.log('popup.js - received message:', message);\n  };\n\n  // Find the current active tab, then open a port to it\n  getTab().then(tab => {\n    // Connects to tab port to enable communication with inContent.js\n    port = chrome.tabs.connect(tab.id, { name: 'chrome-extension-template' });\n    // Set up the message listener\n    port.onMessage.addListener(messageHandler);\n    // Send a test message to in-content.js\n    arr = {\n      message: localStorage.getItem(\"TOKEN\"),\n      email: localStorage.getItem(\"EMAIL\")\n    };\n    sendPortMessage(arr);\n    console.log(\"popup.js \" + arr);\n  });\n};\n\n// Fire scripts after page has loaded\ndocument.addEventListener('DOMContentLoaded', initPopupScript);\nconst onWindowLoad = () => {\n  console.log('onwindowload');\n\n  var message = document.querySelector('#message');\n\n  chrome.tabs.executeScript(null, {\n    file: \"getPagesSource.js\"\n  }, function () {\n    // If you try and inject into an extensions page or the webstore/NTP you'll get an error\n    if (chrome.runtime.lastError) {\n      if (message) {\n        message.innerText = 'There was an error injecting script : \\n' + chrome.runtime.lastError.message;\n      }\n    }\n  });\n};\n\nwindow.onload = onWindowLoad;\nchrome.runtime.onMessage.addListener(function (request, sender) {\n  if (request.action == \"getSource\") {\n    if (message) {\n      message.innerText = request.source;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXRlbXBsYXRlLy4vc3JjL2pzL3BvcHVwLmpzP2RmZmUiXSwibmFtZXMiOlsicG9ydCIsInNlbmRQb3J0TWVzc2FnZSIsImFyciIsInBvc3RNZXNzYWdlIiwiaW5pdFBvcHVwU2NyaXB0IiwiY29uc29sZSIsImxvZyIsImJhY2tncm91bmRXaW5kb3ciLCJjaHJvbWUiLCJleHRlbnNpb24iLCJnZXRCYWNrZ3JvdW5kUGFnZSIsInNhbXBsZUJhY2tncm91bmRHbG9iYWwiLCJnZXRUYWIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRhYnMiLCJxdWVyeSIsImFjdGl2ZSIsImN1cnJlbnRXaW5kb3ciLCJtZXNzYWdlSGFuZGxlciIsIm1lc3NhZ2UiLCJ0aGVuIiwidGFiIiwiY29ubmVjdCIsImlkIiwibmFtZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImVtYWlsIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25XaW5kb3dMb2FkIiwicXVlcnlTZWxlY3RvciIsImV4ZWN1dGVTY3JpcHQiLCJmaWxlIiwicnVudGltZSIsImxhc3RFcnJvciIsImlubmVyVGV4dCIsIndpbmRvdyIsIm9ubG9hZCIsInJlcXVlc3QiLCJzZW5kZXIiLCJhY3Rpb24iLCJzb3VyY2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVdBO0FBQ0EsSUFBSUEsT0FBTyxJQUFYO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGtCQUFrQkMsT0FBT0YsUUFBUUEsS0FBS0csV0FBTCxDQUFpQkQsR0FBakIsQ0FBdkM7O0FBRUE7QUFDQSxNQUFNRSxrQkFBa0IsTUFBTTtBQUM1QkMsVUFBUUMsR0FBUixDQUFZLFdBQVo7O0FBRUE7QUFDQSxRQUFNQyxtQkFBbUJDLE9BQU9DLFNBQVAsQ0FBaUJDLGlCQUFqQixFQUF6QjtBQUNBO0FBQ0FMLFVBQVFDLEdBQVIsQ0FBWUMsaUJBQWlCSSxzQkFBN0I7O0FBR0E7QUFDQSxRQUFNQyxTQUFTLE1BQ2IsSUFBSUMsT0FBSixDQUFZQyxXQUFXO0FBQ3JCTixXQUFPTyxJQUFQLENBQVlDLEtBQVosQ0FDRTtBQUNFQyxjQUFRLElBRFY7QUFFRUMscUJBQWU7QUFGakIsS0FERixFQUtFSCxRQUFRRCxRQUFRQyxLQUFLLENBQUwsQ0FBUixDQUxWO0FBT0QsR0FSRCxDQURGOztBQVdBO0FBQ0EsUUFBTUksaUJBQWlCQyxXQUFXO0FBQ2hDZixZQUFRQyxHQUFSLENBQVksOEJBQVosRUFBNENjLE9BQTVDO0FBQ0QsR0FGRDs7QUFJQTtBQUNBUixXQUFTUyxJQUFULENBQWNDLE9BQU87QUFDbkI7QUFDQXRCLFdBQU9RLE9BQU9PLElBQVAsQ0FBWVEsT0FBWixDQUFvQkQsSUFBSUUsRUFBeEIsRUFBNEIsRUFBRUMsTUFBTSwyQkFBUixFQUE1QixDQUFQO0FBQ0E7QUFDQXpCLFNBQUswQixTQUFMLENBQWVDLFdBQWYsQ0FBMkJSLGNBQTNCO0FBQ0E7QUFDQWpCLFVBQUk7QUFDRmtCLGVBQVNRLGFBQWFDLE9BQWIsQ0FBcUIsT0FBckIsQ0FEUDtBQUVGQyxhQUFPRixhQUFhQyxPQUFiLENBQXFCLE9BQXJCO0FBRkwsS0FBSjtBQUlBNUIsb0JBQWdCQyxHQUFoQjtBQUNBRyxZQUFRQyxHQUFSLENBQVksY0FBYUosR0FBekI7QUFDRCxHQVpEO0FBY0QsQ0F6Q0Q7O0FBMkNBO0FBQ0E2QixTQUFTQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEM1QixlQUE5QztBQUNBLE1BQU02QixlQUFlLE1BQU07QUFDekI1QixVQUFRQyxHQUFSLENBQVksY0FBWjs7QUFFQSxNQUFJYyxVQUFVVyxTQUFTRyxhQUFULENBQXVCLFVBQXZCLENBQWQ7O0FBRUExQixTQUFPTyxJQUFQLENBQVlvQixhQUFaLENBQTBCLElBQTFCLEVBQWdDO0FBQzlCQyxVQUFNO0FBRHdCLEdBQWhDLEVBRUcsWUFBWTtBQUNiO0FBQ0EsUUFBSTVCLE9BQU82QixPQUFQLENBQWVDLFNBQW5CLEVBQThCO0FBQzVCLFVBQUlsQixPQUFKLEVBQWE7QUFDWEEsZ0JBQVFtQixTQUFSLEdBQW9CLDZDQUE2Qy9CLE9BQU82QixPQUFQLENBQWVDLFNBQWYsQ0FBeUJsQixPQUExRjtBQUNEO0FBQ0Y7QUFDRixHQVREO0FBV0QsQ0FoQkQ7O0FBa0JBb0IsT0FBT0MsTUFBUCxHQUFnQlIsWUFBaEI7QUFDQXpCLE9BQU82QixPQUFQLENBQWVYLFNBQWYsQ0FBeUJDLFdBQXpCLENBQXFDLFVBQVVlLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQzlELE1BQUlELFFBQVFFLE1BQVIsSUFBa0IsV0FBdEIsRUFBbUM7QUFDakMsUUFBSXhCLE9BQUosRUFBYTtBQUNYQSxjQUFRbUIsU0FBUixHQUFvQkcsUUFBUUcsTUFBNUI7QUFDRDtBQUNGO0FBQ0YsQ0FORCIsImZpbGUiOiI3MDM5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qIHBvcHVwLmpzXHJcbiAqXHJcbiAqIFRoaXMgZmlsZSBpbml0aWFsaXplcyBpdHMgc2NyaXB0cyBhZnRlciB0aGUgcG9wdXAgaGFzIGxvYWRlZC5cclxuICpcclxuICogSXQgc2hvd3MgaG93IHRvIGFjY2VzcyBnbG9iYWwgdmFyaWFibGVzIGZyb20gYmFja2dyb3VuZC5qcy5cclxuICogTm90ZSB0aGF0IGdldFZpZXdzIGNvdWxkIGJlIHVzZWQgaW5zdGVhZCB0byBhY2Nlc3Mgb3RoZXIgc2NyaXB0cy5cclxuICpcclxuICogQSBwb3J0IHRvIHRoZSBhY3RpdmUgdGFiIGlzIG9wZW4gdG8gc2VuZCBtZXNzYWdlcyB0byBpdHMgaW4tY29udGVudC5qcyBzY3JpcHQuXHJcbiAqXHJcbiAqL1xyXG5cclxuLy8gVGhpcyBwb3J0IGVuYWJsZXMgYSBsb25nLWxpdmVkIGNvbm5lY3Rpb24gdG8gaW4tY29udGVudC5qc1xyXG52YXIgcG9ydCA9IG51bGw7XHJcbi8vIHZhciBhcnIgPXttZXNzYWdlLGVtYWlsfTtcclxuLy8gU2VuZCBtZXNzYWdlcyB0byB0aGUgb3BlbiBwb3J0XHJcbmNvbnN0IHNlbmRQb3J0TWVzc2FnZSA9IGFyciA9PiBwb3J0ICYmIHBvcnQucG9zdE1lc3NhZ2UoYXJyKTtcclxuXHJcbi8vIFN0YXJ0IHRoZSBwb3B1cCBzY3JpcHQsIHRoaXMgY291bGQgYmUgYW55dGhpbmcgZnJvbSBhIHNpbXBsZSBzY3JpcHQgdG8gYSB3ZWJhcHBcclxuY29uc3QgaW5pdFBvcHVwU2NyaXB0ID0gKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdpbml0UG9wdXAnKVxyXG5cclxuICAvLyBBY2Nlc3MgdGhlIGJhY2tncm91bmQgd2luZG93IG9iamVjdFxyXG4gIGNvbnN0IGJhY2tncm91bmRXaW5kb3cgPSBjaHJvbWUuZXh0ZW5zaW9uLmdldEJhY2tncm91bmRQYWdlKCk7XHJcbiAgLy8gRG8gYW55dGhpbmcgd2l0aCB0aGUgZXhwb3NlZCB2YXJpYWJsZXMgZnJvbSBiYWNrZ3JvdW5kLmpzXHJcbiAgY29uc29sZS5sb2coYmFja2dyb3VuZFdpbmRvdy5zYW1wbGVCYWNrZ3JvdW5kR2xvYmFsKTtcclxuXHJcblxyXG4gIC8vIEZpbmQgdGhlIGN1cnJlbnQgYWN0aXZlIHRhYlxyXG4gIGNvbnN0IGdldFRhYiA9ICgpID0+XHJcbiAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgY2hyb21lLnRhYnMucXVlcnkoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICAgICAgY3VycmVudFdpbmRvdzogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFicyA9PiByZXNvbHZlKHRhYnNbMF0pXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gSGFuZGxlIHBvcnQgbWVzc2FnZXNcclxuICBjb25zdCBtZXNzYWdlSGFuZGxlciA9IG1lc3NhZ2UgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3BvcHVwLmpzIC0gcmVjZWl2ZWQgbWVzc2FnZTonLCBtZXNzYWdlKTtcclxuICB9O1xyXG5cclxuICAvLyBGaW5kIHRoZSBjdXJyZW50IGFjdGl2ZSB0YWIsIHRoZW4gb3BlbiBhIHBvcnQgdG8gaXRcclxuICBnZXRUYWIoKS50aGVuKHRhYiA9PiB7XHJcbiAgICAvLyBDb25uZWN0cyB0byB0YWIgcG9ydCB0byBlbmFibGUgY29tbXVuaWNhdGlvbiB3aXRoIGluQ29udGVudC5qc1xyXG4gICAgcG9ydCA9IGNocm9tZS50YWJzLmNvbm5lY3QodGFiLmlkLCB7IG5hbWU6ICdjaHJvbWUtZXh0ZW5zaW9uLXRlbXBsYXRlJyB9KTtcclxuICAgIC8vIFNldCB1cCB0aGUgbWVzc2FnZSBsaXN0ZW5lclxyXG4gICAgcG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIobWVzc2FnZUhhbmRsZXIpO1xyXG4gICAgLy8gU2VuZCBhIHRlc3QgbWVzc2FnZSB0byBpbi1jb250ZW50LmpzXHJcbiAgICBhcnI9e1xyXG4gICAgICBtZXNzYWdlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIlRPS0VOXCIpLFxyXG4gICAgICBlbWFpbDogbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJFTUFJTFwiKVxyXG4gICAgfVxyXG4gICAgc2VuZFBvcnRNZXNzYWdlKGFycik7XHJcbiAgICBjb25zb2xlLmxvZyhcInBvcHVwLmpzIFwiKyBhcnIpO1xyXG4gIH0pO1xyXG5cclxufTtcclxuXHJcbi8vIEZpcmUgc2NyaXB0cyBhZnRlciBwYWdlIGhhcyBsb2FkZWRcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXRQb3B1cFNjcmlwdCk7XHJcbmNvbnN0IG9uV2luZG93TG9hZCA9ICgpID0+IHtcclxuICBjb25zb2xlLmxvZygnb253aW5kb3dsb2FkJylcclxuXHJcbiAgdmFyIG1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVzc2FnZScpO1xyXG5cclxuICBjaHJvbWUudGFicy5leGVjdXRlU2NyaXB0KG51bGwsIHtcclxuICAgIGZpbGU6IFwiZ2V0UGFnZXNTb3VyY2UuanNcIlxyXG4gIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIElmIHlvdSB0cnkgYW5kIGluamVjdCBpbnRvIGFuIGV4dGVuc2lvbnMgcGFnZSBvciB0aGUgd2Vic3RvcmUvTlRQIHlvdSdsbCBnZXQgYW4gZXJyb3JcclxuICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcclxuICAgICAgaWYgKG1lc3NhZ2UpIHtcclxuICAgICAgICBtZXNzYWdlLmlubmVyVGV4dCA9ICdUaGVyZSB3YXMgYW4gZXJyb3IgaW5qZWN0aW5nIHNjcmlwdCA6IFxcbicgKyBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxufVxyXG5cclxud2luZG93Lm9ubG9hZCA9IG9uV2luZG93TG9hZDtcclxuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKGZ1bmN0aW9uIChyZXF1ZXN0LCBzZW5kZXIpIHtcclxuICBpZiAocmVxdWVzdC5hY3Rpb24gPT0gXCJnZXRTb3VyY2VcIikge1xyXG4gICAgaWYgKG1lc3NhZ2UpIHtcclxuICAgICAgbWVzc2FnZS5pbm5lclRleHQgPSByZXF1ZXN0LnNvdXJjZTtcclxuICAgIH1cclxuICB9XHJcbn0pOyAgIl19\n//# sourceURL=webpack-internal:///7039\n")})();