(()=>{eval("/* popup.js\r\n *\r\n * This file initializes its scripts after the popup has loaded.\r\n *\r\n * It shows how to access global variables from background.js.\r\n * Note that getViews could be used instead to access other scripts.\r\n *\r\n * A port to the active tab is open to send messages to its in-content.js script.\r\n *\r\n */\n\n// Start the popup script, this could be anything from a simple script to a webapp\nconst initPopupScript = () => {\n    // Access the background window object\n    const backgroundWindow = chrome.extension.getBackgroundPage();\n    // Do anything with the exposed variables from background.js\n    console.log(backgroundWindow.sampleBackgroundGlobal);\n\n    // This port enables a long-lived connection to in-content.js\n    let port = null;\n\n    // Send messages to the open port\n    const sendPortMessage = message => port.postMessage(message);\n\n    // Find the current active tab\n    const getTab = () => new Promise(resolve => {\n        chrome.tabs.query({\n            active: true,\n            currentWindow: true\n        }, tabs => resolve(tabs[0]));\n    });\n\n    // Handle port messages\n    const messageHandler = message => {\n        console.log('popup.js - received message:', message);\n    };\n\n    // Find the current active tab, then open a port to it\n    getTab().then(tab => {\n        // Connects to tab port to enable communication with inContent.js\n        port = chrome.tabs.connect(tab.id, { name: 'chrome-extension-template' });\n        // Set up the message listener\n        port.onMessage.addListener(messageHandler);\n        // Send a test message to in-content.js\n        sendPortMessage('Message from popup!');\n    });\n};\n\n// Fire scripts after page has loaded\ndocument.addEventListener('DOMContentLoaded', initPopupScript);\nfunction onWindowLoad() {\n\n    var message = document.querySelector('#message');\n\n    chrome.tabs.executeScript(null, {\n        file: \"getPagesSource.js\"\n    }, function () {\n        // If you try and inject into an extensions page or the webstore/NTP you'll get an error\n        if (chrome.runtime.lastError) {\n            message.innerText = 'There was an error injecting script : \\n' + chrome.runtime.lastError.message;\n        }\n    });\n}\n\nwindow.onload = onWindowLoad;\nchrome.runtime.onMessage.addListener(function (request, sender) {\n    if (request.action == \"getSource\") {\n        message.innerText = request.source;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXRlbXBsYXRlLy4vc3JjL2pzL3BvcHVwLmpzP2RmZmUiXSwibmFtZXMiOlsiaW5pdFBvcHVwU2NyaXB0IiwiYmFja2dyb3VuZFdpbmRvdyIsImNocm9tZSIsImV4dGVuc2lvbiIsImdldEJhY2tncm91bmRQYWdlIiwiY29uc29sZSIsImxvZyIsInNhbXBsZUJhY2tncm91bmRHbG9iYWwiLCJwb3J0Iiwic2VuZFBvcnRNZXNzYWdlIiwibWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiZ2V0VGFiIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0YWJzIiwicXVlcnkiLCJhY3RpdmUiLCJjdXJyZW50V2luZG93IiwibWVzc2FnZUhhbmRsZXIiLCJ0aGVuIiwidGFiIiwiY29ubmVjdCIsImlkIiwibmFtZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25XaW5kb3dMb2FkIiwicXVlcnlTZWxlY3RvciIsImV4ZWN1dGVTY3JpcHQiLCJmaWxlIiwicnVudGltZSIsImxhc3RFcnJvciIsImlubmVyVGV4dCIsIndpbmRvdyIsIm9ubG9hZCIsInJlcXVlc3QiLCJzZW5kZXIiLCJhY3Rpb24iLCJzb3VyY2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVdBO0FBQ0EsTUFBTUEsa0JBQWtCLE1BQU07QUFDMUI7QUFDQSxVQUFNQyxtQkFBbUJDLE9BQU9DLFNBQVAsQ0FBaUJDLGlCQUFqQixFQUF6QjtBQUNBO0FBQ0FDLFlBQVFDLEdBQVIsQ0FBWUwsaUJBQWlCTSxzQkFBN0I7O0FBRUE7QUFDQSxRQUFJQyxPQUFPLElBQVg7O0FBRUE7QUFDQSxVQUFNQyxrQkFBa0JDLFdBQVdGLEtBQUtHLFdBQUwsQ0FBaUJELE9BQWpCLENBQW5DOztBQUVBO0FBQ0EsVUFBTUUsU0FBUyxNQUNYLElBQUlDLE9BQUosQ0FBWUMsV0FBVztBQUNuQlosZUFBT2EsSUFBUCxDQUFZQyxLQUFaLENBQ0k7QUFDSUMsb0JBQVEsSUFEWjtBQUVJQywyQkFBZTtBQUZuQixTQURKLEVBS0lILFFBQVFELFFBQVFDLEtBQUssQ0FBTCxDQUFSLENBTFo7QUFPSCxLQVJELENBREo7O0FBV0E7QUFDQSxVQUFNSSxpQkFBaUJULFdBQVc7QUFDOUJMLGdCQUFRQyxHQUFSLENBQVksOEJBQVosRUFBNENJLE9BQTVDO0FBQ0gsS0FGRDs7QUFJQTtBQUNBRSxhQUFTUSxJQUFULENBQWNDLE9BQU87QUFDakI7QUFDQWIsZUFBT04sT0FBT2EsSUFBUCxDQUFZTyxPQUFaLENBQW9CRCxJQUFJRSxFQUF4QixFQUE0QixFQUFFQyxNQUFNLDJCQUFSLEVBQTVCLENBQVA7QUFDQTtBQUNBaEIsYUFBS2lCLFNBQUwsQ0FBZUMsV0FBZixDQUEyQlAsY0FBM0I7QUFDQTtBQUNBVix3QkFBZ0IscUJBQWhCO0FBQ0gsS0FQRDtBQVFILENBdENEOztBQXdDQTtBQUNBa0IsU0FBU0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDNUIsZUFBOUM7QUFDQSxTQUFTNkIsWUFBVCxHQUF3Qjs7QUFFcEIsUUFBSW5CLFVBQVVpQixTQUFTRyxhQUFULENBQXVCLFVBQXZCLENBQWQ7O0FBRUE1QixXQUFPYSxJQUFQLENBQVlnQixhQUFaLENBQTBCLElBQTFCLEVBQWdDO0FBQzlCQyxjQUFNO0FBRHdCLEtBQWhDLEVBRUcsWUFBVztBQUNaO0FBQ0EsWUFBSTlCLE9BQU8rQixPQUFQLENBQWVDLFNBQW5CLEVBQThCO0FBQzVCeEIsb0JBQVF5QixTQUFSLEdBQW9CLDZDQUE2Q2pDLE9BQU8rQixPQUFQLENBQWVDLFNBQWYsQ0FBeUJ4QixPQUExRjtBQUNEO0FBQ0YsS0FQRDtBQVNEOztBQUVEMEIsT0FBT0MsTUFBUCxHQUFnQlIsWUFBaEI7QUFDQTNCLE9BQU8rQixPQUFQLENBQWVSLFNBQWYsQ0FBeUJDLFdBQXpCLENBQXFDLFVBQVNZLE9BQVQsRUFBa0JDLE1BQWxCLEVBQTBCO0FBQzdELFFBQUlELFFBQVFFLE1BQVIsSUFBa0IsV0FBdEIsRUFBbUM7QUFDakM5QixnQkFBUXlCLFNBQVIsR0FBb0JHLFFBQVFHLE1BQTVCO0FBQ0Q7QUFDRixDQUpEIiwiZmlsZSI6IjcwMzkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyogcG9wdXAuanNcclxuICpcclxuICogVGhpcyBmaWxlIGluaXRpYWxpemVzIGl0cyBzY3JpcHRzIGFmdGVyIHRoZSBwb3B1cCBoYXMgbG9hZGVkLlxyXG4gKlxyXG4gKiBJdCBzaG93cyBob3cgdG8gYWNjZXNzIGdsb2JhbCB2YXJpYWJsZXMgZnJvbSBiYWNrZ3JvdW5kLmpzLlxyXG4gKiBOb3RlIHRoYXQgZ2V0Vmlld3MgY291bGQgYmUgdXNlZCBpbnN0ZWFkIHRvIGFjY2VzcyBvdGhlciBzY3JpcHRzLlxyXG4gKlxyXG4gKiBBIHBvcnQgdG8gdGhlIGFjdGl2ZSB0YWIgaXMgb3BlbiB0byBzZW5kIG1lc3NhZ2VzIHRvIGl0cyBpbi1jb250ZW50LmpzIHNjcmlwdC5cclxuICpcclxuICovXHJcblxyXG4vLyBTdGFydCB0aGUgcG9wdXAgc2NyaXB0LCB0aGlzIGNvdWxkIGJlIGFueXRoaW5nIGZyb20gYSBzaW1wbGUgc2NyaXB0IHRvIGEgd2ViYXBwXHJcbmNvbnN0IGluaXRQb3B1cFNjcmlwdCA9ICgpID0+IHtcclxuICAgIC8vIEFjY2VzcyB0aGUgYmFja2dyb3VuZCB3aW5kb3cgb2JqZWN0XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kV2luZG93ID0gY2hyb21lLmV4dGVuc2lvbi5nZXRCYWNrZ3JvdW5kUGFnZSgpO1xyXG4gICAgLy8gRG8gYW55dGhpbmcgd2l0aCB0aGUgZXhwb3NlZCB2YXJpYWJsZXMgZnJvbSBiYWNrZ3JvdW5kLmpzXHJcbiAgICBjb25zb2xlLmxvZyhiYWNrZ3JvdW5kV2luZG93LnNhbXBsZUJhY2tncm91bmRHbG9iYWwpO1xyXG5cclxuICAgIC8vIFRoaXMgcG9ydCBlbmFibGVzIGEgbG9uZy1saXZlZCBjb25uZWN0aW9uIHRvIGluLWNvbnRlbnQuanNcclxuICAgIGxldCBwb3J0ID0gbnVsbDtcclxuXHJcbiAgICAvLyBTZW5kIG1lc3NhZ2VzIHRvIHRoZSBvcGVuIHBvcnRcclxuICAgIGNvbnN0IHNlbmRQb3J0TWVzc2FnZSA9IG1lc3NhZ2UgPT4gcG9ydC5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuXHJcbiAgICAvLyBGaW5kIHRoZSBjdXJyZW50IGFjdGl2ZSB0YWJcclxuICAgIGNvbnN0IGdldFRhYiA9ICgpID0+XHJcbiAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50V2luZG93OiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdGFicyA9PiByZXNvbHZlKHRhYnNbMF0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gSGFuZGxlIHBvcnQgbWVzc2FnZXNcclxuICAgIGNvbnN0IG1lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3BvcHVwLmpzIC0gcmVjZWl2ZWQgbWVzc2FnZTonLCBtZXNzYWdlKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gRmluZCB0aGUgY3VycmVudCBhY3RpdmUgdGFiLCB0aGVuIG9wZW4gYSBwb3J0IHRvIGl0XHJcbiAgICBnZXRUYWIoKS50aGVuKHRhYiA9PiB7XHJcbiAgICAgICAgLy8gQ29ubmVjdHMgdG8gdGFiIHBvcnQgdG8gZW5hYmxlIGNvbW11bmljYXRpb24gd2l0aCBpbkNvbnRlbnQuanNcclxuICAgICAgICBwb3J0ID0gY2hyb21lLnRhYnMuY29ubmVjdCh0YWIuaWQsIHsgbmFtZTogJ2Nocm9tZS1leHRlbnNpb24tdGVtcGxhdGUnIH0pO1xyXG4gICAgICAgIC8vIFNldCB1cCB0aGUgbWVzc2FnZSBsaXN0ZW5lclxyXG4gICAgICAgIHBvcnQub25NZXNzYWdlLmFkZExpc3RlbmVyKG1lc3NhZ2VIYW5kbGVyKTtcclxuICAgICAgICAvLyBTZW5kIGEgdGVzdCBtZXNzYWdlIHRvIGluLWNvbnRlbnQuanNcclxuICAgICAgICBzZW5kUG9ydE1lc3NhZ2UoJ01lc3NhZ2UgZnJvbSBwb3B1cCEnKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuLy8gRmlyZSBzY3JpcHRzIGFmdGVyIHBhZ2UgaGFzIGxvYWRlZFxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdFBvcHVwU2NyaXB0KTtcclxuZnVuY3Rpb24gb25XaW5kb3dMb2FkKCkge1xyXG5cclxuICAgIHZhciBtZXNzYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21lc3NhZ2UnKTtcclxuICBcclxuICAgIGNocm9tZS50YWJzLmV4ZWN1dGVTY3JpcHQobnVsbCwge1xyXG4gICAgICBmaWxlOiBcImdldFBhZ2VzU291cmNlLmpzXCJcclxuICAgIH0sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBJZiB5b3UgdHJ5IGFuZCBpbmplY3QgaW50byBhbiBleHRlbnNpb25zIHBhZ2Ugb3IgdGhlIHdlYnN0b3JlL05UUCB5b3UnbGwgZ2V0IGFuIGVycm9yXHJcbiAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcclxuICAgICAgICBtZXNzYWdlLmlubmVyVGV4dCA9ICdUaGVyZSB3YXMgYW4gZXJyb3IgaW5qZWN0aW5nIHNjcmlwdCA6IFxcbicgKyBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgXHJcbiAgfVxyXG4gIFxyXG4gIHdpbmRvdy5vbmxvYWQgPSBvbldpbmRvd0xvYWQ7XHJcbiAgY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKGZ1bmN0aW9uKHJlcXVlc3QsIHNlbmRlcikge1xyXG4gICAgaWYgKHJlcXVlc3QuYWN0aW9uID09IFwiZ2V0U291cmNlXCIpIHtcclxuICAgICAgbWVzc2FnZS5pbm5lclRleHQgPSByZXF1ZXN0LnNvdXJjZTtcclxuICAgIH1cclxuICB9KTsgICJdfQ==\n//# sourceURL=webpack-internal:///7039\n")})();