<<<<<<< Updated upstream
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("/* popup.js\n *\n * This file initializes its scripts after the popup has loaded.\n *\n * It shows how to access global variables from background.js.\n * Note that getViews could be used instead to access other scripts.\n *\n * A port to the active tab is open to send messages to its in-content.js script.\n *\n */\n\n// Start the popup script, this could be anything from a simple script to a webapp\nconst initPopupScript = () => {\n    // Access the background window object\n    const backgroundWindow = chrome.extension.getBackgroundPage();\n    // Do anything with the exposed variables from background.js\n    console.log(backgroundWindow.sampleBackgroundGlobal);\n\n    // This port enables a long-lived connection to in-content.js\n    let port = null;\n\n    // Send messages to the open port\n    const sendPortMessage = message => port.postMessage(message);\n\n    // Find the current active tab\n    const getTab = () => new Promise(resolve => {\n        chrome.tabs.query({\n            active: true,\n            currentWindow: true\n        }, tabs => resolve(tabs[0]));\n    });\n\n    // Handle port messages\n    const messageHandler = message => {\n        console.log('popup.js - received message:', message);\n    };\n\n    // Find the current active tab, then open a port to it\n    getTab().then(tab => {\n        // Connects to tab port to enable communication with inContent.js\n        port = chrome.tabs.connect(tab.id, { name: 'chrome-extension-template' });\n        // Set up the message listener\n        port.onMessage.addListener(messageHandler);\n        // Send a test message to in-content.js\n        sendPortMessage('Message from popup!');\n    });\n};\n\n// Fire scripts after page has loaded\ndocument.addEventListener('DOMContentLoaded', initPopupScript);\nfunction onWindowLoad() {\n\n    var message = document.querySelector('#message');\n\n    chrome.tabs.executeScript(null, {\n        file: \"getPagesSource.js\"\n    }, function () {\n        // If you try and inject into an extensions page or the webstore/NTP you'll get an error\n        if (chrome.runtime.lastError) {\n            message.innerText = 'There was an error injecting script : \\n' + chrome.runtime.lastError.message;\n        }\n    });\n}\n\nwindow.onload = onWindowLoad;\nchrome.runtime.onMessage.addListener(function (request, sender) {\n    if (request.action == \"getSource\") {\n        message.innerText = request.source;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvcG9wdXAuanM/MDIyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBwb3B1cC5qc1xuICpcbiAqIFRoaXMgZmlsZSBpbml0aWFsaXplcyBpdHMgc2NyaXB0cyBhZnRlciB0aGUgcG9wdXAgaGFzIGxvYWRlZC5cbiAqXG4gKiBJdCBzaG93cyBob3cgdG8gYWNjZXNzIGdsb2JhbCB2YXJpYWJsZXMgZnJvbSBiYWNrZ3JvdW5kLmpzLlxuICogTm90ZSB0aGF0IGdldFZpZXdzIGNvdWxkIGJlIHVzZWQgaW5zdGVhZCB0byBhY2Nlc3Mgb3RoZXIgc2NyaXB0cy5cbiAqXG4gKiBBIHBvcnQgdG8gdGhlIGFjdGl2ZSB0YWIgaXMgb3BlbiB0byBzZW5kIG1lc3NhZ2VzIHRvIGl0cyBpbi1jb250ZW50LmpzIHNjcmlwdC5cbiAqXG4gKi9cblxuLy8gU3RhcnQgdGhlIHBvcHVwIHNjcmlwdCwgdGhpcyBjb3VsZCBiZSBhbnl0aGluZyBmcm9tIGEgc2ltcGxlIHNjcmlwdCB0byBhIHdlYmFwcFxuY29uc3QgaW5pdFBvcHVwU2NyaXB0ID0gKCkgPT4ge1xuICAgIC8vIEFjY2VzcyB0aGUgYmFja2dyb3VuZCB3aW5kb3cgb2JqZWN0XG4gICAgY29uc3QgYmFja2dyb3VuZFdpbmRvdyA9IGNocm9tZS5leHRlbnNpb24uZ2V0QmFja2dyb3VuZFBhZ2UoKTtcbiAgICAvLyBEbyBhbnl0aGluZyB3aXRoIHRoZSBleHBvc2VkIHZhcmlhYmxlcyBmcm9tIGJhY2tncm91bmQuanNcbiAgICBjb25zb2xlLmxvZyhiYWNrZ3JvdW5kV2luZG93LnNhbXBsZUJhY2tncm91bmRHbG9iYWwpO1xuXG4gICAgLy8gVGhpcyBwb3J0IGVuYWJsZXMgYSBsb25nLWxpdmVkIGNvbm5lY3Rpb24gdG8gaW4tY29udGVudC5qc1xuICAgIGxldCBwb3J0ID0gbnVsbDtcblxuICAgIC8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG9wZW4gcG9ydFxuICAgIGNvbnN0IHNlbmRQb3J0TWVzc2FnZSA9IG1lc3NhZ2UgPT4gcG9ydC5wb3N0TWVzc2FnZShtZXNzYWdlKTtcblxuICAgIC8vIEZpbmQgdGhlIGN1cnJlbnQgYWN0aXZlIHRhYlxuICAgIGNvbnN0IGdldFRhYiA9ICgpID0+XG4gICAgICAgIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgY2hyb21lLnRhYnMucXVlcnkoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRXaW5kb3c6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRhYnMgPT4gcmVzb2x2ZSh0YWJzWzBdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgcG9ydCBtZXNzYWdlc1xuICAgIGNvbnN0IG1lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwb3B1cC5qcyAtIHJlY2VpdmVkIG1lc3NhZ2U6JywgbWVzc2FnZSk7XG4gICAgfTtcblxuICAgIC8vIEZpbmQgdGhlIGN1cnJlbnQgYWN0aXZlIHRhYiwgdGhlbiBvcGVuIGEgcG9ydCB0byBpdFxuICAgIGdldFRhYigpLnRoZW4odGFiID0+IHtcbiAgICAgICAgLy8gQ29ubmVjdHMgdG8gdGFiIHBvcnQgdG8gZW5hYmxlIGNvbW11bmljYXRpb24gd2l0aCBpbkNvbnRlbnQuanNcbiAgICAgICAgcG9ydCA9IGNocm9tZS50YWJzLmNvbm5lY3QodGFiLmlkLCB7IG5hbWU6ICdjaHJvbWUtZXh0ZW5zaW9uLXRlbXBsYXRlJyB9KTtcbiAgICAgICAgLy8gU2V0IHVwIHRoZSBtZXNzYWdlIGxpc3RlbmVyXG4gICAgICAgIHBvcnQub25NZXNzYWdlLmFkZExpc3RlbmVyKG1lc3NhZ2VIYW5kbGVyKTtcbiAgICAgICAgLy8gU2VuZCBhIHRlc3QgbWVzc2FnZSB0byBpbi1jb250ZW50LmpzXG4gICAgICAgIHNlbmRQb3J0TWVzc2FnZSgnTWVzc2FnZSBmcm9tIHBvcHVwIScpO1xuICAgIH0pO1xufTtcblxuLy8gRmlyZSBzY3JpcHRzIGFmdGVyIHBhZ2UgaGFzIGxvYWRlZFxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXRQb3B1cFNjcmlwdCk7XG5mdW5jdGlvbiBvbldpbmRvd0xvYWQoKSB7XG5cbiAgICB2YXIgbWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZXNzYWdlJyk7XG4gIFxuICAgIGNocm9tZS50YWJzLmV4ZWN1dGVTY3JpcHQobnVsbCwge1xuICAgICAgZmlsZTogXCJnZXRQYWdlc1NvdXJjZS5qc1wiXG4gICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBJZiB5b3UgdHJ5IGFuZCBpbmplY3QgaW50byBhbiBleHRlbnNpb25zIHBhZ2Ugb3IgdGhlIHdlYnN0b3JlL05UUCB5b3UnbGwgZ2V0IGFuIGVycm9yXG4gICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgIG1lc3NhZ2UuaW5uZXJUZXh0ID0gJ1RoZXJlIHdhcyBhbiBlcnJvciBpbmplY3Rpbmcgc2NyaXB0IDogXFxuJyArIGNocm9tZS5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlO1xuICAgICAgfVxuICAgIH0pO1xuICBcbiAgfVxuICBcbiAgd2luZG93Lm9ubG9hZCA9IG9uV2luZG93TG9hZDtcbiAgY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKGZ1bmN0aW9uKHJlcXVlc3QsIHNlbmRlcikge1xuICAgIGlmIChyZXF1ZXN0LmFjdGlvbiA9PSBcImdldFNvdXJjZVwiKSB7XG4gICAgICBtZXNzYWdlLmlubmVyVGV4dCA9IHJlcXVlc3Quc291cmNlO1xuICAgIH1cbiAgfSk7ICBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL3BvcHVwLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFGQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ]);
=======
(()=>{eval("/* popup.js\r\n *\r\n * This file initializes its scripts after the popup has loaded.\r\n *\r\n * It shows how to access global variables from background.js.\r\n * Note that getViews could be used instead to access other scripts.\r\n *\r\n * A port to the active tab is open to send messages to its in-content.js script.\r\n *\r\n */\n\n// This port enables a long-lived connection to in-content.js\nvar port = null;\n\n// Send messages to the open port\nconst sendPortMessage = message => port && port.postMessage(message);\n\n// Start the popup script, this could be anything from a simple script to a webapp\nconst initPopupScript = () => {\n  console.log('initPopup');\n\n  // Access the background window object\n  const backgroundWindow = chrome.extension.getBackgroundPage();\n  // Do anything with the exposed variables from background.js\n  console.log(backgroundWindow.sampleBackgroundGlobal);\n\n  // Find the current active tab\n  const getTab = () => new Promise(resolve => {\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n    }, tabs => resolve(tabs[0]));\n  });\n\n  // Handle port messages\n  const messageHandler = message => {\n    console.log('popup.js - received message:', message);\n  };\n\n  // Find the current active tab, then open a port to it\n  getTab().then(tab => {\n    // Connects to tab port to enable communication with inContent.js\n    port = chrome.tabs.connect(tab.id, { name: 'chrome-extension-template' });\n    // Set up the message listener\n    port.onMessage.addListener(messageHandler);\n    // Send a test message to in-content.js\n    sendPortMessage({ message: 'Message from popup!' });\n  });\n};\n\n// Fire scripts after page has loaded\ndocument.addEventListener('DOMContentLoaded', initPopupScript);\nconst onWindowLoad = () => {\n  console.log('onwindowload');\n\n  var message = document.querySelector('#message');\n\n  chrome.tabs.executeScript(null, {\n    file: \"getPagesSource.js\"\n  }, function () {\n    // If you try and inject into an extensions page or the webstore/NTP you'll get an error\n    if (chrome.runtime.lastError) {\n      if (message) {\n        message.innerText = 'There was an error injecting script : \\n' + chrome.runtime.lastError.message;\n      }\n    }\n  });\n};\n\nwindow.onload = onWindowLoad;\nchrome.runtime.onMessage.addListener(function (request, sender) {\n  if (request.action == \"getSource\") {\n    if (message) {\n      message.innerText = request.source;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXRlbXBsYXRlLy4vc3JjL2pzL3BvcHVwLmpzP2RmZmUiXSwibmFtZXMiOlsicG9ydCIsInNlbmRQb3J0TWVzc2FnZSIsIm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImluaXRQb3B1cFNjcmlwdCIsImNvbnNvbGUiLCJsb2ciLCJiYWNrZ3JvdW5kV2luZG93IiwiY2hyb21lIiwiZXh0ZW5zaW9uIiwiZ2V0QmFja2dyb3VuZFBhZ2UiLCJzYW1wbGVCYWNrZ3JvdW5kR2xvYmFsIiwiZ2V0VGFiIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0YWJzIiwicXVlcnkiLCJhY3RpdmUiLCJjdXJyZW50V2luZG93IiwibWVzc2FnZUhhbmRsZXIiLCJ0aGVuIiwidGFiIiwiY29ubmVjdCIsImlkIiwibmFtZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25XaW5kb3dMb2FkIiwicXVlcnlTZWxlY3RvciIsImV4ZWN1dGVTY3JpcHQiLCJmaWxlIiwicnVudGltZSIsImxhc3RFcnJvciIsImlubmVyVGV4dCIsIndpbmRvdyIsIm9ubG9hZCIsInJlcXVlc3QiLCJzZW5kZXIiLCJhY3Rpb24iLCJzb3VyY2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVdBO0FBQ0EsSUFBSUEsT0FBTyxJQUFYOztBQUVBO0FBQ0EsTUFBTUMsa0JBQWtCQyxXQUFXRixRQUFRQSxLQUFLRyxXQUFMLENBQWlCRCxPQUFqQixDQUEzQzs7QUFFQTtBQUNBLE1BQU1FLGtCQUFrQixNQUFNO0FBQzVCQyxVQUFRQyxHQUFSLENBQVksV0FBWjs7QUFFQTtBQUNBLFFBQU1DLG1CQUFtQkMsT0FBT0MsU0FBUCxDQUFpQkMsaUJBQWpCLEVBQXpCO0FBQ0E7QUFDQUwsVUFBUUMsR0FBUixDQUFZQyxpQkFBaUJJLHNCQUE3Qjs7QUFHQTtBQUNBLFFBQU1DLFNBQVMsTUFDYixJQUFJQyxPQUFKLENBQVlDLFdBQVc7QUFDckJOLFdBQU9PLElBQVAsQ0FBWUMsS0FBWixDQUNFO0FBQ0VDLGNBQVEsSUFEVjtBQUVFQyxxQkFBZTtBQUZqQixLQURGLEVBS0VILFFBQVFELFFBQVFDLEtBQUssQ0FBTCxDQUFSLENBTFY7QUFPRCxHQVJELENBREY7O0FBV0E7QUFDQSxRQUFNSSxpQkFBaUJqQixXQUFXO0FBQ2hDRyxZQUFRQyxHQUFSLENBQVksOEJBQVosRUFBNENKLE9BQTVDO0FBQ0QsR0FGRDs7QUFJQTtBQUNBVSxXQUFTUSxJQUFULENBQWNDLE9BQU87QUFDbkI7QUFDQXJCLFdBQU9RLE9BQU9PLElBQVAsQ0FBWU8sT0FBWixDQUFvQkQsSUFBSUUsRUFBeEIsRUFBNEIsRUFBRUMsTUFBTSwyQkFBUixFQUE1QixDQUFQO0FBQ0E7QUFDQXhCLFNBQUt5QixTQUFMLENBQWVDLFdBQWYsQ0FBMkJQLGNBQTNCO0FBQ0E7QUFDQWxCLG9CQUFnQixFQUFFQyxTQUFTLHFCQUFYLEVBQWhCO0FBQ0QsR0FQRDtBQVNELENBcENEOztBQXNDQTtBQUNBeUIsU0FBU0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDeEIsZUFBOUM7QUFDQSxNQUFNeUIsZUFBZSxNQUFNO0FBQ3pCeEIsVUFBUUMsR0FBUixDQUFZLGNBQVo7O0FBRUEsTUFBSUosVUFBVXlCLFNBQVNHLGFBQVQsQ0FBdUIsVUFBdkIsQ0FBZDs7QUFFQXRCLFNBQU9PLElBQVAsQ0FBWWdCLGFBQVosQ0FBMEIsSUFBMUIsRUFBZ0M7QUFDOUJDLFVBQU07QUFEd0IsR0FBaEMsRUFFRyxZQUFZO0FBQ2I7QUFDQSxRQUFJeEIsT0FBT3lCLE9BQVAsQ0FBZUMsU0FBbkIsRUFBOEI7QUFDNUIsVUFBSWhDLE9BQUosRUFBYTtBQUNYQSxnQkFBUWlDLFNBQVIsR0FBb0IsNkNBQTZDM0IsT0FBT3lCLE9BQVAsQ0FBZUMsU0FBZixDQUF5QmhDLE9BQTFGO0FBQ0Q7QUFDRjtBQUNGLEdBVEQ7QUFXRCxDQWhCRDs7QUFrQkFrQyxPQUFPQyxNQUFQLEdBQWdCUixZQUFoQjtBQUNBckIsT0FBT3lCLE9BQVAsQ0FBZVIsU0FBZixDQUF5QkMsV0FBekIsQ0FBcUMsVUFBVVksT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDOUQsTUFBSUQsUUFBUUUsTUFBUixJQUFrQixXQUF0QixFQUFtQztBQUNqQyxRQUFJdEMsT0FBSixFQUFhO0FBQ1hBLGNBQVFpQyxTQUFSLEdBQW9CRyxRQUFRRyxNQUE1QjtBQUNEO0FBQ0Y7QUFDRixDQU5EIiwiZmlsZSI6IjcwMzkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyogcG9wdXAuanNcclxuICpcclxuICogVGhpcyBmaWxlIGluaXRpYWxpemVzIGl0cyBzY3JpcHRzIGFmdGVyIHRoZSBwb3B1cCBoYXMgbG9hZGVkLlxyXG4gKlxyXG4gKiBJdCBzaG93cyBob3cgdG8gYWNjZXNzIGdsb2JhbCB2YXJpYWJsZXMgZnJvbSBiYWNrZ3JvdW5kLmpzLlxyXG4gKiBOb3RlIHRoYXQgZ2V0Vmlld3MgY291bGQgYmUgdXNlZCBpbnN0ZWFkIHRvIGFjY2VzcyBvdGhlciBzY3JpcHRzLlxyXG4gKlxyXG4gKiBBIHBvcnQgdG8gdGhlIGFjdGl2ZSB0YWIgaXMgb3BlbiB0byBzZW5kIG1lc3NhZ2VzIHRvIGl0cyBpbi1jb250ZW50LmpzIHNjcmlwdC5cclxuICpcclxuICovXHJcblxyXG4vLyBUaGlzIHBvcnQgZW5hYmxlcyBhIGxvbmctbGl2ZWQgY29ubmVjdGlvbiB0byBpbi1jb250ZW50LmpzXHJcbnZhciBwb3J0ID0gbnVsbDtcclxuXHJcbi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG9wZW4gcG9ydFxyXG5jb25zdCBzZW5kUG9ydE1lc3NhZ2UgPSBtZXNzYWdlID0+IHBvcnQgJiYgcG9ydC5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuXHJcbi8vIFN0YXJ0IHRoZSBwb3B1cCBzY3JpcHQsIHRoaXMgY291bGQgYmUgYW55dGhpbmcgZnJvbSBhIHNpbXBsZSBzY3JpcHQgdG8gYSB3ZWJhcHBcclxuY29uc3QgaW5pdFBvcHVwU2NyaXB0ID0gKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdpbml0UG9wdXAnKVxyXG5cclxuICAvLyBBY2Nlc3MgdGhlIGJhY2tncm91bmQgd2luZG93IG9iamVjdFxyXG4gIGNvbnN0IGJhY2tncm91bmRXaW5kb3cgPSBjaHJvbWUuZXh0ZW5zaW9uLmdldEJhY2tncm91bmRQYWdlKCk7XHJcbiAgLy8gRG8gYW55dGhpbmcgd2l0aCB0aGUgZXhwb3NlZCB2YXJpYWJsZXMgZnJvbSBiYWNrZ3JvdW5kLmpzXHJcbiAgY29uc29sZS5sb2coYmFja2dyb3VuZFdpbmRvdy5zYW1wbGVCYWNrZ3JvdW5kR2xvYmFsKTtcclxuXHJcblxyXG4gIC8vIEZpbmQgdGhlIGN1cnJlbnQgYWN0aXZlIHRhYlxyXG4gIGNvbnN0IGdldFRhYiA9ICgpID0+XHJcbiAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgY2hyb21lLnRhYnMucXVlcnkoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICAgICAgY3VycmVudFdpbmRvdzogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFicyA9PiByZXNvbHZlKHRhYnNbMF0pXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gSGFuZGxlIHBvcnQgbWVzc2FnZXNcclxuICBjb25zdCBtZXNzYWdlSGFuZGxlciA9IG1lc3NhZ2UgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3BvcHVwLmpzIC0gcmVjZWl2ZWQgbWVzc2FnZTonLCBtZXNzYWdlKTtcclxuICB9O1xyXG5cclxuICAvLyBGaW5kIHRoZSBjdXJyZW50IGFjdGl2ZSB0YWIsIHRoZW4gb3BlbiBhIHBvcnQgdG8gaXRcclxuICBnZXRUYWIoKS50aGVuKHRhYiA9PiB7XHJcbiAgICAvLyBDb25uZWN0cyB0byB0YWIgcG9ydCB0byBlbmFibGUgY29tbXVuaWNhdGlvbiB3aXRoIGluQ29udGVudC5qc1xyXG4gICAgcG9ydCA9IGNocm9tZS50YWJzLmNvbm5lY3QodGFiLmlkLCB7IG5hbWU6ICdjaHJvbWUtZXh0ZW5zaW9uLXRlbXBsYXRlJyB9KTtcclxuICAgIC8vIFNldCB1cCB0aGUgbWVzc2FnZSBsaXN0ZW5lclxyXG4gICAgcG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIobWVzc2FnZUhhbmRsZXIpO1xyXG4gICAgLy8gU2VuZCBhIHRlc3QgbWVzc2FnZSB0byBpbi1jb250ZW50LmpzXHJcbiAgICBzZW5kUG9ydE1lc3NhZ2UoeyBtZXNzYWdlOiAnTWVzc2FnZSBmcm9tIHBvcHVwIScgfSk7XHJcbiAgfSk7XHJcblxyXG59O1xyXG5cclxuLy8gRmlyZSBzY3JpcHRzIGFmdGVyIHBhZ2UgaGFzIGxvYWRlZFxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdFBvcHVwU2NyaXB0KTtcclxuY29uc3Qgb25XaW5kb3dMb2FkID0gKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdvbndpbmRvd2xvYWQnKVxyXG5cclxuICB2YXIgbWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZXNzYWdlJyk7XHJcblxyXG4gIGNocm9tZS50YWJzLmV4ZWN1dGVTY3JpcHQobnVsbCwge1xyXG4gICAgZmlsZTogXCJnZXRQYWdlc1NvdXJjZS5qc1wiXHJcbiAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gSWYgeW91IHRyeSBhbmQgaW5qZWN0IGludG8gYW4gZXh0ZW5zaW9ucyBwYWdlIG9yIHRoZSB3ZWJzdG9yZS9OVFAgeW91J2xsIGdldCBhbiBlcnJvclxyXG4gICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikge1xyXG4gICAgICBpZiAobWVzc2FnZSkge1xyXG4gICAgICAgIG1lc3NhZ2UuaW5uZXJUZXh0ID0gJ1RoZXJlIHdhcyBhbiBlcnJvciBpbmplY3Rpbmcgc2NyaXB0IDogXFxuJyArIGNocm9tZS5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG59XHJcblxyXG53aW5kb3cub25sb2FkID0gb25XaW5kb3dMb2FkO1xyXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoZnVuY3Rpb24gKHJlcXVlc3QsIHNlbmRlcikge1xyXG4gIGlmIChyZXF1ZXN0LmFjdGlvbiA9PSBcImdldFNvdXJjZVwiKSB7XHJcbiAgICBpZiAobWVzc2FnZSkge1xyXG4gICAgICBtZXNzYWdlLmlubmVyVGV4dCA9IHJlcXVlc3Quc291cmNlO1xyXG4gICAgfVxyXG4gIH1cclxufSk7ICAiXX0=\n//# sourceURL=webpack-internal:///7039\n")})();
>>>>>>> Stashed changes
